/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/DefaultAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct DefaultAppError {
   10|       |    private let _messageKey: String
   11|       |
   12|       |    // MARK: Initializer
   13|       |
   14|      5|    init(messageKey: String) {
   15|      5|        _messageKey = messageKey
   16|      5|    }
   17|       |
   18|       |}
   19|       |
   20|       |// MARK: AppError
   21|       |
   22|       |extension DefaultAppError: AppError {
   23|       |
   24|      1|    public var raw: Error? {
   25|      1|        return nil
   26|      1|    }
   27|       |
   28|      1|    public var messageKey: String {
   29|      1|        return _messageKey
   30|      1|    }
   31|       |
   32|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/DeserializationAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct DeserializationAppError {
   10|       |
   11|       |    private let developerMessage: String
   12|       |
   13|       |    private enum Constant {
   14|       |        static let translationKey = "error.global"
   15|       |    }
   16|       |
   17|       |    // MARK: Initializer
   18|       |
   19|      2|    public init(developerMessage: String) {
   20|      2|        self.developerMessage = developerMessage
   21|      2|    }
   22|       |
   23|       |}
   24|       |
   25|       |// MARK: AppError
   26|       |
   27|       |extension DeserializationAppError: AppError {
   28|       |
   29|      1|    public var raw: Error? {
   30|      1|        return nil
   31|      1|    }
   32|       |
   33|      1|    public var messageKey: String {
   34|      1|        return Constant.translationKey
   35|      1|    }
   36|       |
   37|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/ExpectsContentAppError.swift:
    1|       |//
    2|       |//  ExpectsContentAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 23/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct ExpectsContentAppError {
   10|       |    private enum Constant {
   11|       |        static let translationKey = "error.global"
   12|       |    }
   13|       |}
   14|       |
   15|       |// MARK: AppError
   16|       |
   17|       |extension ExpectsContentAppError: AppError {
   18|       |
   19|      1|    public var raw: Error? {
   20|      1|        return nil
   21|      1|    }
   22|       |
   23|      1|    public var messageKey: String {
   24|      1|        return Constant.translationKey
   25|      1|    }
   26|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/InvalidFormAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct InvalidFormAppError {
   10|       |
   11|       |    private enum Constant {
   12|       |        static let translationKey = "error.global.form"
   13|       |    }
   14|       |
   15|       |}
   16|       |
   17|       |// MARK: AppError
   18|       |
   19|       |extension InvalidFormAppError: AppError {
   20|       |
   21|      1|    public var raw: Error? {
   22|      1|        return nil
   23|      1|    }
   24|       |
   25|      1|    public var messageKey: String {
   26|      1|        return Constant.translationKey
   27|      1|    }
   28|       |
   29|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/MalformedURLAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct MalformedURLAppError {
   10|       |
   11|       |    private enum Constant {
   12|       |        static let translationKey = "error.global"
   13|       |    }
   14|       |
   15|       |}
   16|       |
   17|       |// MARK: AppError
   18|       |
   19|       |extension MalformedURLAppError: AppError {
   20|       |
   21|      1|    public var raw: Error? {
   22|      1|        return nil
   23|      1|    }
   24|       |
   25|      1|    public var messageKey: String {
   26|      1|        return Constant.translationKey
   27|      1|    }
   28|       |
   29|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/NetworkAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct NetworkAppError {
   10|       |    private let error: Error?
   11|       |
   12|       |    private enum Constant {
   13|       |        static let translationKey = "error.global.network"
   14|       |    }
   15|       |
   16|       |    // MARK: Intializer
   17|       |
   18|      3|    init(error: Error?) {
   19|      3|        self.error = error
   20|      3|    }
   21|       |
   22|       |}
   23|       |
   24|       |// MARK: AppError
   25|       |
   26|       |extension NetworkAppError: AppError {
   27|       |
   28|      1|    public var raw: Error? {
   29|      1|        return nil
   30|      1|    }
   31|       |
   32|      1|    public var messageKey: String {
   33|      1|        return Constant.translationKey
   34|      1|    }
   35|       |
   36|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/NoRequestParameterAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct NoRequestParameterAppError {
   10|       |
   11|       |    private enum Constant {
   12|       |        static let translationKey = "error.global.default"
   13|       |    }
   14|       |
   15|       |}
   16|       |
   17|       |// MARK: AppError
   18|       |
   19|       |extension NoRequestParameterAppError: AppError {
   20|       |
   21|      1|    public var raw: Error? {
   22|      1|        return nil
   23|      1|    }
   24|       |
   25|      1|    public var messageKey: String {
   26|      1|        return Constant.translationKey
   27|      1|    }
   28|       |
   29|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/ParameterTypeAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct ParameterTypeAppError {
   10|       |
   11|       |    private let developerMessage: String
   12|       |
   13|       |    private enum Constant {
   14|       |        static let translationKey = "error.global.default"
   15|       |    }
   16|       |
   17|       |    // MARK: Initializer
   18|       |
   19|      1|    public init(developerMessage: String) {
   20|      1|        self.developerMessage = developerMessage
   21|      1|    }
   22|       |
   23|       |}
   24|       |
   25|       |// MARK: AppError
   26|       |
   27|       |extension ParameterTypeAppError: AppError {
   28|       |
   29|      1|    public var raw: Error? {
   30|      1|        return nil
   31|      1|    }
   32|       |
   33|      1|    public var messageKey: String {
   34|      1|        return Constant.translationKey
   35|      1|    }
   36|       |
   37|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/AppError/Implementation/SerializationAppError.swift:
    1|       |//
    2|       |//  DeserializationAppError.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct SerializationAppError {
   10|       |    private let error: Error?
   11|       |
   12|       |    private enum Constant {
   13|       |        static let translationKey = "error.global.default"
   14|       |    }
   15|       |
   16|       |    // MARK: Intializer
   17|       |
   18|      2|    init(error: Error?) {
   19|      2|        self.error = error
   20|      2|    }
   21|       |
   22|       |}
   23|       |
   24|       |// MARK: AppError
   25|       |
   26|       |extension SerializationAppError: AppError {
   27|       |
   28|      1|    public var raw: Error? {
   29|      1|        return nil
   30|      1|    }
   31|       |
   32|      1|    public var messageKey: String {
   33|      1|        return Constant.translationKey
   34|      1|    }
   35|       |
   36|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/EventRequest/EventRequest.swift:
    1|       |//
    2|       |//  EventRequest.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 22/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public struct EventRequest {
   12|       |    private let _path: String?
   13|       |    private let _parameters: [String: String]?
   14|       |    private let _data: [String: Any]?
   15|       |    private let _action: AppAction
   16|       |
   17|       |    // MARK: Initializer
   18|       |
   19|      2|    public init(path: String? = nil, parameters: [String: String]? = nil, data: [String: Any]? = nil, action: AppAction) {
   20|      2|        _path = path
   21|      2|        _parameters = parameters
   22|      2|        _data = data
   23|      2|        _action = action
   24|      2|    }
   25|       |}
   26|       |
   27|       |// MARK: - Public
   28|       |extension EventRequest {
   29|       |
   30|      1|    public var path: String? {
   31|      1|        return _path
   32|      1|    }
   33|       |
   34|      2|    public var parameters: [String: String]? {
   35|      2|        return _parameters
   36|      2|    }
   37|       |
   38|      1|    public var action: AppAction {
   39|      1|        return _action
   40|      1|    }
   41|       |
   42|      2|    public var data: [String: Any]? {
   43|      2|        return _data
   44|      2|    }
   45|       |
   46|      1|    public func parameter(named: String) -> String? {
   47|      1|        return parameters?[named]
   48|      1|    }
   49|       |
   50|      2|    public func dataValue<T>() -> T? {
   51|      2|        return data?[EventParameterKey.value] as? T
   52|      2|    }
   53|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/EventResponse/AppEventResponse.swift:
    1|       |//
    2|       |//  AppEventResponse.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 26/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct AppEventResponse {
   10|       |    private let _code: EventResponseCode
   11|       |    private let _error: Error?
   12|       |    private let _data: [String: Any]?
   13|       |
   14|       |    // MARK: Initializer
   15|       |
   16|      2|    init(code: EventResponseCode, error: Error? = nil, data: [String: Any]? = nil) {
   17|      2|        _code = code
   18|      2|        _error = error
   19|      2|        _data = data
   20|      2|    }
   21|       |}
   22|       |
   23|       |// MARK: EventResponse
   24|       |
   25|       |extension AppEventResponse: EventResponse {
   26|       |
   27|      2|    public func data<T>(named: String) -> T? {
   28|      2|        return self.data?[named] as? T
   29|      2|    }
   30|       |
   31|      1|    public var succeed: Bool {
   32|      1|        return nil == error
   33|      1|    }
   34|       |
   35|       |    public var error: Error? {
   36|       |        return _error
   37|       |    }
   38|       |
   39|       |    public var data: [String: Any]? {
   40|       |        return _data
   41|       |    }
   42|       |
   43|      2|    public var code: EventResponseCode {
   44|      2|        return _code
   45|      2|    }
   46|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/EventResponse/EventResponse.swift:
    1|       |//
    2|       |//  EventResponse.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 26/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public protocol EventResponse {
   10|       |    var succeed: Bool { get }
   11|       |    var data: [String: Any]? { get }
   12|       |    var error: Error? { get }
   13|       |    var code: EventResponseCode { get }
   14|       |
   15|       |    func data<T>(named: String) -> T?
   16|       |}
   17|       |
   18|       |extension EventResponse {
   19|      0|    func data<T>(named: String) -> T? {
   20|      0|        return self.data?[named] as? T
   21|      0|    }
   22|       |
   23|      1|    func dataValue<T>() -> T? {
   24|      1|        return self.data(named: EventParameterKey.value)
   25|      1|    }
   26|       |
   27|      1|    func dataViewState() -> ViewState? {
   28|      1|        return self.data(named: EventParameterKey.viewState)
   29|      1|    }
   30|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/EventResponse/LoadingEventResponse.swift:
    1|       |//
    2|       |//  LoadingEventResponse.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 26/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct LoadingEventResponse {
   10|       |    private enum Constant {
   11|       |        static let data = [EventParameterKey.viewState: ViewState.loading]
   12|       |    }
   13|       |}
   14|       |
   15|       |// MARK: EventResponse
   16|       |
   17|       |extension LoadingEventResponse: EventResponse {
   18|       |
   19|      0|    public func data<T>(named: String) -> T? {
   20|      0|        return Constant.data[named] as? T
   21|      0|    }
   22|       |
   23|      1|    public var succeed: Bool {
   24|      1|        return true
   25|      1|    }
   26|       |
   27|      1|    public var data: [String: Any]? {
   28|      1|        return Constant.data
   29|      1|    }
   30|       |
   31|      1|    public var error: Error? {
   32|      1|        return nil
   33|      1|    }
   34|       |
   35|      1|    public var code: EventResponseCode {
   36|      1|        return .processing
   37|      1|    }
   38|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/Prsenter/AnyPresenter.swift:
    1|       |//
    2|       |//  AnyPresenter.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public final class AnyPresenter<ViewModel>: Presenter {
   10|       |    private let _handle: (EventResponse) -> ViewModel
   11|       |
   12|       |    // MARK: Initializer
   13|       |
   14|      1|    init<P: Presenter>(base: P) where P.ViewModel == ViewModel {
   15|      1|        _handle = base.handle
   16|      1|    }
   17|       |
   18|       |    // MARK: Presenter
   19|       |
   20|      1|    public func handle(response: EventResponse) -> ViewModel {
   21|      1|        return _handle(response)
   22|      1|    }
   23|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/Router/AnyRouter.swift:
    1|       |//
    2|       |//  AnyRouter.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import RxSwift
   10|       |
   11|       |public final class AnyRouter<Object>: Router {
   12|       |    private let _callback: () -> Observable<Object>
   13|       |    private let _route: (UIViewController?, EventRequest) -> Observable<EventResponse>
   14|       |
   15|       |    // MARK: Initializer
   16|       |
   17|      1|    init<R: Router>(base: R) where R.Object == Object {
   18|      1|        _callback = {
   19|      1|            return base.callback
   20|      1|        }
   21|      1|        _route = base.route
   22|      1|    }
   23|       |
   24|       |    // MARK: Router
   25|       |
   26|      1|    public var callback: Observable<Object> {
   27|      1|        return _callback()
   28|      1|    }
   29|       |
   30|      1|    public func route(from root: UIViewController?, request: EventRequest) -> Observable<EventResponse> {
   31|      1|        return _route(root, request)
   32|      1|    }
   33|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/ViewType/AnyViewType.swift:
    1|       |//
    2|       |//  AnyViewType.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import RxSwift
   10|       |import RxCocoa
   11|       |
   12|       |public final class AnyViewType<ViewModel>: ViewType {
   13|       |    private let _view: () -> UIView
   14|       |    private let _request: () -> Observable<EventRequest>
   15|       |    private let _update: (Driver<ViewModel>) -> Void
   16|       |
   17|       |    // MARK: Initializer
   18|       |
   19|      1|    init<V: ViewType>(base: V) where V.ViewModel == ViewModel {
   20|      1|        _view = {
   21|      1|            return base.view
   22|      1|        }
   23|      1|
   24|      1|        _request = base.request
   25|      1|        _update = base.update
   26|      1|    }
   27|       |
   28|       |    // MARK: ViewType
   29|       |
   30|      1|    public var view: UIView {
   31|      1|        return _view()
   32|      1|    }
   33|       |
   34|      1|    public func request() -> Observable<EventRequest> {
   35|      1|        return _request()
   36|      1|    }
   37|       |
   38|      1|    public func update(with stateProvider: Driver<ViewModel>) {
   39|      1|        return _update(stateProvider)
   40|      1|    }
   41|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Core/ViewType/ViewType.swift:
    1|       |//
    2|       |//  ViewType.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 26/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |import RxCocoa
   11|       |import RxSwift
   12|       |
   13|       |public protocol ViewType {
   14|       |    associatedtype ViewModel
   15|       |
   16|       |    var view: UIView { get }
   17|       |
   18|       |    func request() -> Observable<EventRequest>
   19|       |    func update(with provider: Driver<ViewModel>)
   20|       |}
   21|       |
   22|       |extension ViewType where Self: UIView {
   23|      2|    var view: UIView {
   24|      2|        return self
   25|      2|    }
   26|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Endpoint/Endpoint.swift:
    1|       |//
    2|       |//  Endpoint.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 21/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public protocol Endpoint {
   10|       |    var baseURL: String { get }
   11|       |    var path: String { get }
   12|       |    var httpMethod: HTTPMethod { get }
   13|       |    var headers: [String: String]? { get }
   14|       |    var queryParameters: [String: String]? { get }
   15|       |    var bodyParameters: [String: Any]? { get }
   16|       |}
   17|       |
   18|       |// MARK: Default Method
   19|       |
   20|       |extension Endpoint {
   21|      9|    var headers: [String: String]? {
   22|      9|        return nil
   23|      9|    }
   24|       |
   25|      9|    var queryParameters: [String: String]? {
   26|      9|        return nil
   27|      9|    }
   28|       |
   29|      8|    var bodyParameters: [String: Any]? {
   30|      8|        return nil
   31|      8|    }
   32|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Interceptor/AnyInterceptor.swift:
    1|       |//
    2|       |// Created by SANGBONG MOON on 2019-01-20.
    3|       |// Copyright (c) 2019 Scott Moon. All rights reserved.
    4|       |//
    5|       |
    6|       |import RxSwift
    7|       |
    8|       |public struct AnyInterceptor<Input> {
    9|       |    private let _intercept: (InterceptorChain<Input>) -> Observable<Input>
   10|       |
   11|       |    // MARK: Initializer
   12|       |
   13|      8|    init<T: Interceptor>(base: T) where T.Input == Input {
   14|      8|        _intercept = base.interceptor
   15|      8|    }
   16|       |}
   17|       |
   18|       |// MARK: Interceptor
   19|       |
   20|       |extension AnyInterceptor: Interceptor {
   21|      7|    public func interceptor(chain: InterceptorChain<Input>) -> Observable<Input> {
   22|      7|        return _intercept(chain)
   23|      7|    }
   24|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Interceptor/InterceptorChain.swift:
    1|       |//
    2|       |// Created by SANGBONG MOON on 2019-01-20.
    3|       |// Copyright (c) 2019 Scott Moon. All rights reserved.
    4|       |//
    5|       |
    6|       |import RxSwift
    7|       |
    8|       |public final class InterceptorChain<T> {
    9|       |    private var _interceptors: [AnyInterceptor<T>]
   10|       |
   11|       |    public var input: T?
   12|       |    // MARK: Initializer
   13|       |
   14|     13|    public convenience init() {
   15|     13|        self.init(interceptors: [AnyInterceptor<T>](), input: nil)
   16|     13|    }
   17|       |
   18|       |    // MARK: - Public
   19|     21|    public init(interceptors: [AnyInterceptor<T>], input: T?) {
   20|     21|        self._interceptors = interceptors
   21|     21|        self.input = input
   22|     21|    }
   23|       |
   24|      6|    public func add(interceptor: AnyInterceptor<T>) -> InterceptorChain {
   25|      6|        _interceptors.append(interceptor)
   26|      6|        return self
   27|      6|    }
   28|       |
   29|     21|    public func proceed(object: T? = nil) -> Observable<T> {
   30|     21|        if let object = object {
   31|     13|            return  proceedNext(with: object)
   32|     13|        } else if let input = self.input {
   33|      8|            return  proceedNext(with: input)
   34|      8|        } else {
   35|      0|            fatalError("You must set an input object to the chain (setter or in parameter of `proceed` method)")
   36|      0|        }
   37|      0|    }
   38|       |
   39|       |    // MARK: - Private
   40|       |
   41|       |    private func proceedNext(with input: T) -> Observable<T> {
   42|       |        guard let interceptor = self._interceptors.first else {
   43|       |            return  Observable.just(input)
   44|       |        }
   45|       |
   46|       |        var interceptors = self._interceptors
   47|       |        interceptors.removeFirst()
   48|       |
   49|       |        let chain = InterceptorChain(interceptors: interceptors, input: input)
   50|       |        return interceptor.interceptor(chain: chain)
   51|       |    }
   52|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Logger/AppLogger.swift:
    1|       |//
    2|       |// Created by SANGBONG MOON on 2019-01-20.
    3|       |// Copyright (c) 2019 Scott Moon. All rights reserved.
    4|       |//
    5|       |
    6|       |import SwiftyBeaver
    7|       |
    8|       |public struct AppLogger {
    9|       |    private let logger: SwiftyBeaver.Type
   10|       |
   11|       |    // MARK: Initializer
   12|       |
   13|     10|    init() {
   14|     10|        logger = SwiftyBeaver.self
   15|     10|
   16|     10|        let console = ConsoleDestination()
   17|     10|        console.asynchronously = false
   18|     10|        console.format = "$DHH:mm:ss.SSS$d $C$L$c - $M"
   19|     10|        logger.addDestination(console)
   20|     10|    }
   21|       |}
   22|       |
   23|       |// MARK: Logger
   24|       |extension AppLogger: Logger {
   25|     13|    public func log(level: LoggerLevel, message: Any) {
   26|     13|        switch level {
   27|     13|        case .debug:
   28|      8|            logger.debug(message)
   29|     13|        case .verbose:
   30|      8|            logger.verbose(message)
   31|     13|        case .info:
   32|     62|            logger.info(message)
   33|     13|        case .warning:
   34|      8|            logger.warning(message)
   35|     13|        case .error:
   36|      8|            logger.error(message)
   37|     13|        }
   38|     13|    }
   39|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Logger/LoggerInterceptor.swift:
    1|       |//
    2|       |// Created by SANGBONG MOON on 2019-01-20.
    3|       |// Copyright (c) 2019 Scott Moon. All rights reserved.
    4|       |//
    5|       |
    6|       |import RxSwift
    7|       |import UIKit
    8|       |
    9|       |public final class LoggerInterceptor {
   10|       |    public typealias Input = URLRequest
   11|       |    private let logger: Logger
   12|       |
   13|       |    // MARK: Initializer
   14|       |
   15|      9|    init(logger: Logger) {
   16|      9|        self.logger = logger
   17|      9|    }
   18|       |}
   19|       |
   20|       |// MARK: Interceptor
   21|       |extension LoggerInterceptor: Interceptor {
   22|      8|    public func interceptor(chain: InterceptorChain<Input>) -> Observable<Input> {
   23|      8|        if let input = chain.input {
   24|      8|            logger.log(level: .info, message: "Sending request: \n" + String(describing: input) + "\n")
   25|      8|        }
   26|      8|        return chain.proceed()
   27|      8|    }
   28|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Network/HTTPClientType/AppHTTPClientType.swift:
    1|       |//
    2|       |//  AppHTTPClientType.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 25/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import RxSwift
   11|       |
   12|       |public final class AppHTTPClientType {
   13|       |    private let _transformer: AnyTransformer<Endpoint, URLRequest>
   14|       |    private let _networkAdapter: NetworkAdapter
   15|       |    private let _requestChain: InterceptorChain<URLRequest>
   16|       |    private let _responseChain: InterceptorChain<Response>
   17|       |    private let _httpErrorHandler: HTTPErrorHandler
   18|       |
   19|       |    // MARK: Initializer
   20|       |
   21|       |    init(
   22|       |        transformer: AnyTransformer<Endpoint, URLRequest>,
   23|       |        networkAdapter: NetworkAdapter,
   24|       |        requestChain: InterceptorChain<URLRequest>,
   25|       |        responseChain: InterceptorChain<Response>,
   26|       |        httpErrorHandler: HTTPErrorHandler
   27|      6|    ) {
   28|      6|        _transformer = transformer
   29|      6|        _networkAdapter = networkAdapter
   30|      6|        _requestChain = requestChain
   31|      6|        _responseChain = responseChain
   32|      6|        _httpErrorHandler = httpErrorHandler
   33|      6|    }
   34|       |}
   35|       |
   36|       |// MARK: HTTPClientType
   37|       |
   38|       |extension AppHTTPClientType: HTTPClientType {
   39|       |
   40|      5|    public func request<T: Deserializable>(endpoint: Endpoint) -> Observable<Result<T>> {
   41|      5|        let requestChain = _requestChain
   42|      5|        let networkAdapter = _networkAdapter
   43|      5|        let responseChain = _responseChain
   44|      5|        let httpErrorHandler = _httpErrorHandler
   45|      5|
   46|      5|        return _transformer
   47|      5|            .rx_transform(object: endpoint)
   48|      5|            .flatMap { requestChain.proceed(object: $0) }
   49|      5|            .flatMap { networkAdapter.rx_send(request: $0) }
   50|      5|            .flatMap { responseChain.proceed(object: $0) }
   51|      5|            .flatMap { (response) -> Observable<Result<T>> in
   52|      5|
   53|      5|                if !response.succeed {
   54|      1|                    return Observable.error(httpErrorHandler.handle(resoponse: response))
   55|      4|                }
   56|      4|
   57|      4|                guard let data = response.data else {
   58|      0|                    return Observable.just(Result.noContent)
   59|      4|                }
   60|      4|
   61|      4|                do {
   62|      4|                    let object = try T.init(data: data)
   63|      4|                    return Observable.just(Result.value(object))
   64|      4|                } catch {
   65|      3|                    return Observable.error(error)
   66|      3|                }
   67|      0|        }
   68|      5|    }
   69|       |
   70|      1|    public func request(endpoint: Endpoint) -> Observable<Response> {
   71|      1|        let requestChain = _requestChain
   72|      1|        let networkAdapter = _networkAdapter
   73|      1|        let responseChain = _responseChain
   74|      1|
   75|      1|        return _transformer
   76|      1|            .rx_transform(object: endpoint)
   77|      1|            .flatMap { requestChain.proceed(object: $0) }
   78|      1|            .flatMap { networkAdapter.rx_send(request: $0) }
   79|      1|            .flatMap { responseChain.proceed(object: $0) }
   80|      1|    }
   81|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Network/NetworkAdapter/URLSessionNetworkAdapter.swift:
    1|       |//
    2|       |//  URLSessionNetworkAdapter.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 25/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |import RxSwift
   11|       |import RxCocoa
   12|       |
   13|       |public final class URLSessionNetworkAdapter {
   14|       |    private let _networkActivity: NetworkActivity
   15|       |    private let _session: URLSession
   16|       |
   17|       |    // MARK: Initializer
   18|       |
   19|      7|    init(networkActivity: NetworkActivity, session: URLSession) {
   20|      7|        _networkActivity = networkActivity
   21|      7|        _session = session
   22|      7|    }
   23|       |}
   24|       |
   25|       |// MARK: NetworkAdapter
   26|       |
   27|       |extension URLSessionNetworkAdapter: NetworkAdapter {
   28|       |
   29|      8|    public func rx_send(request: URLRequest) -> Observable<Response> {
   30|      8|        _networkActivity.show()
   31|      8|
   32|      8|        return Observable.create { [weak self] observer in
   33|      8|            var didHideNetworkActivity = false
   34|      8|
   35|      8|            let task = self?._session.dataTask(with: request) { (data, response, error) in
   36|      8|                didHideNetworkActivity = true
   37|      8|                self?._networkActivity.hide()
   38|      8|
   39|      8|                guard
   40|      8|                    let response = response,
   41|      8|                    let data = data
   42|      8|                    else {
   43|      1|                        observer.onError(NetworkAppError(error: error))
   44|      1|                        return
   45|      7|                }
   46|      7|
   47|      7|                observer.onNext(AppResponse(request: request, data: data, httpResponse: response, error: error))
   48|      7|                observer.onCompleted()
   49|      7|            }
   50|      8|
   51|      8|            task?.resume()
   52|      8|
   53|      8|            return Disposables.create {
   54|      8|                if didHideNetworkActivity == false {
   55|      0|                    self?._networkActivity.hide()
   56|      8|                }
   57|      8|                task?.cancel()
   58|      8|            }
   59|      8|        }
   60|      8|    }
   61|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Network/Response/AppResponse.swift:
    1|       |//
    2|       |//  AppResponse.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 24/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public struct AppResponse {
   12|       |    private let _request: URLRequest
   13|       |    private let _data: Data?
   14|       |    private let httpResponse: URLResponse?
   15|       |    private let _error: Error?
   16|       |
   17|       |    // MARK: Initializer
   18|       |
   19|      9|    init(request: URLRequest, data: Data?, httpResponse: URLResponse?, error: Error?) {
   20|      9|        _request = request
   21|      9|        _data = data
   22|      9|        _error = error
   23|      9|        self.httpResponse = httpResponse
   24|      9|    }
   25|       |}
   26|       |
   27|       |// MARK: Response
   28|       |
   29|       |extension AppResponse: Response {
   30|       |
   31|      7|    public var succeed: Bool {
   32|      7|        guard let httpResponse = httpResponse as? HTTPURLResponse else {
   33|      1|            return false
   34|      6|        }
   35|      6|        return httpResponse.statusCode >= HTTPStatusCode.ok.rawValue && httpResponse.statusCode < HTTPStatusCode.badRequest.rawValue
   36|      7|    }
   37|       |
   38|      6|    public var data: Data? {
   39|      6|        return _data
   40|      6|    }
   41|       |
   42|      1|    public var error: Error? {
   43|      1|        return _error
   44|      1|    }
   45|       |
   46|      2|    public var statusCode: HTTPStatusCode? {
   47|      2|        guard let httpResponse = httpResponse as? HTTPURLResponse else {
   48|      1|            return nil
   49|      1|        }
   50|      1|        return HTTPStatusCode(rawValue: httpResponse.statusCode)
   51|      2|    }
   52|       |
   53|      1|    public var request: URLRequest {
   54|      1|        return _request
   55|      1|    }
   56|       |
   57|      2|    public var headers: [String: Any]? {
   58|      2|        guard let httpResponse = httpResponse as? HTTPURLResponse else {
   59|      1|            return nil
   60|      1|        }
   61|      1|        return httpResponse.allHeaderFields as? [String: Any]
   62|      2|    }
   63|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Parser/Deserializable.swift:
    1|       |//
    2|       |//  Deserializable.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 23/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public protocol Deserializable {
   12|       |    init(data: Data) throws
   13|       |}
   14|       |
   15|       |public protocol AnyInitializable {
   16|       |    init(object: Any) throws
   17|       |}
   18|       |
   19|       |extension Deserializable where Self: AnyInitializable {
   20|      5|    init(data: Data) throws {
   21|      5|        let object: Any = try JSONSerialization.jsonObject(with: data, options: .allowFragments)
   22|      5|
   23|      5|        try self.init(object: object)
   24|      5|    }
   25|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Repository/AnyRespository.swift:
    1|       |//
    2|       |//  AnyRespositoryMock.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 25/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import RxSwift
   10|       |
   11|       |public final class AnyRepository<T> {
   12|       |
   13|       |    private let _get: (RespositoryParameter) -> Observable<Result<T>>
   14|       |    private let _post: (RespositoryParameter) -> Observable<Result<T>>
   15|       |    private let _put: (RespositoryParameter) -> Observable<Result<T>>
   16|       |    private let _patch: (RespositoryParameter) -> Observable<Result<T>>
   17|       |    private let _delete: (RespositoryParameter) -> Observable<Result<T>>
   18|       |
   19|       |    // MARK: Initializer
   20|       |
   21|      5|    init<R: Repository>(base: R) where R.Resource == T {
   22|      5|        _get = base.get
   23|      5|        _post = base.post
   24|      5|        _put = base.put
   25|      5|        _patch = base.patch
   26|      5|        _delete = base.delete
   27|      5|    }
   28|       |
   29|       |}
   30|       |
   31|       |// Repository
   32|       |extension AnyRepository: Repository {
   33|      1|    public func get(with parameter: RespositoryParameter) -> Observable<Result<T>> {
   34|      1|        return _get(parameter)
   35|      1|    }
   36|       |
   37|      1|    public func post(with parameter: RespositoryParameter) -> Observable<Result<T>> {
   38|      1|        return _post(parameter)
   39|      1|    }
   40|       |
   41|      1|    public func put(with parameter: RespositoryParameter) -> Observable<Result<T>> {
   42|      1|        return _put(parameter)
   43|      1|    }
   44|       |
   45|      1|    public func patch(with parameter: RespositoryParameter) -> Observable<Result<T>> {
   46|      1|        return _patch(parameter)
   47|      1|    }
   48|       |
   49|      1|    public func delete(with parameter: RespositoryParameter) -> Observable<Result<T>> {
   50|      1|        return _delete(parameter)
   51|      1|    }
   52|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Transformer/AnyTransformer.swift:
    1|       |//
    2|       |//  AnyTransformer.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 23/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct AnyTransformer<Input, Output> {
   10|       |    private let _transform: (Input) throws -> Output
   11|       |
   12|       |    // MARK: Initializer
   13|       |
   14|     12|    init<T: Transformer>(base: T) where T.Input == Input, T.Output == Output {
   15|     12|        _transform = base.transform
   16|     12|    }
   17|       |}
   18|       |
   19|       |// MARK: Transformer
   20|       |
   21|       |extension AnyTransformer: Transformer {
   22|     13|    public func transform(object: Input) throws -> Output {
   23|     13|        return try _transform(object)
   24|     13|    }
   25|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Transformer/Implementation/EndpointToURLRequestTransformer.swift:
    1|       |//
    2|       |//  DictionaryToUserTransformerMock.swift
    3|       |//  RxVipKitTests
    4|       |//
    5|       |//  Created by SANGBONG MOON on 23/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public struct EndpointToURLRequestTransformer {
   12|       |}
   13|       |
   14|       |// MARK: Transformer
   15|       |
   16|       |extension EndpointToURLRequestTransformer: Transformer {
   17|     10|    public func transform(object: Endpoint) throws -> URLRequest {
   18|     10|        guard let url = URL(string: object.baseURL)?.appendingPathComponent(object.path) else {
   19|      1|            throw MalformedURLAppError()
   20|      9|        }
   21|      9|
   22|      9|        var urlComponent = URLComponents(url: url, resolvingAgainstBaseURL: false)
   23|      9|
   24|      9|        if let queryParameter = object.queryParameters {
   25|      1|            urlComponent?.queryItems = queryParameter.map { URLQueryItem(name: $0, value: $1) }
   26|      9|        }
   27|      9|
   28|      9|        guard let finalUrl = urlComponent?.url else {
   29|      0|            throw MalformedURLAppError()
   30|      9|        }
   31|      9|
   32|      9|        var request = URLRequest(url: finalUrl)
   33|      9|        request.httpMethod = object.httpMethod.rawValue
   34|      9|
   35|      9|        object.headers?.forEach({ (key, value) in
   36|      1|            request.addValue(value, forHTTPHeaderField: key)
   37|      1|        })
   38|      9|
   39|      9|        if let bodyParameter = object.bodyParameters {
   40|      2|            do {
   41|      2|                request.httpBody = try JSONSerialization.data(withJSONObject: bodyParameter, options: .prettyPrinted)
   42|      2|            } catch {
   43|      1|                throw SerializationAppError(error: error)
   44|      1|            }
   45|      8|        }
   46|      8|
   47|      8|        return request
   48|      9|
   49|      9|    }
   50|       |
   51|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Transformer/Transformer+Rx.swift:
    1|       |//
    2|       |//  Transformer+Rx.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 23/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import RxSwift
   10|       |
   11|       |public extension Transformer {
   12|     12|    func rx_transform(object: Input) -> Observable<Output> {
   13|     12|        return Observable.create { (observer) -> Disposable in
   14|     12|            do {
   15|     12|                observer.onNext(try self.transform(object: object))
   16|     12|                observer.onCompleted()
   17|     12|            } catch {
   18|      3|                observer.onError(error)
   19|      9|            }
   20|      9|
   21|      9|            return Disposables.create()
   22|     12|        }
   23|     12|    }
   24|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Translator/NSLocalizedTranslator.swift:
    1|       |//
    2|       |//  NSLocalizedTranslator.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 21/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import Foundation
   10|       |
   11|       |public final class NSLocalizedTranslator: Translator {
   12|      1|    public func translation(for key: String) -> String {
   13|      1|        return NSLocalizedString(key, comment: key)
   14|      1|    }
   15|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Utils/InMemory/AppInMemory.swift:
    1|       |//
    2|       |//  AppInMemory.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import RxSwift
   10|       |
   11|       |public final class AppInMemory<T>: InMemory {
   12|       |    private(set) public var value: T
   13|       |
   14|       |    // MARK: Initializer
   15|       |
   16|      1|    init(defaultValue: T) {
   17|      1|        value = defaultValue
   18|      1|    }
   19|       |
   20|       |    // MARK: InMemory
   21|       |
   22|      1|    public func update(with object: T) -> Observable<T> {
   23|      1|        value = object
   24|      1|
   25|      1|        return Observable.just(value)
   26|      1|    }
   27|       |
   28|      2|    public var rxValue: Observable<T> {
   29|      2|        return Observable.just(value)
   30|      2|    }
   31|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Utils/RxExtensions/UIViewController+Rx.swift:
    1|       |//
    2|       |//  UIViewController+Rx.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |import RxSwift
   11|       |
   12|       |public extension Reactive where Base: UIViewController {
   13|      0|    var viewWillAppear: Observable<Void> {
   14|      0|        return methodInvoked(#selector(base.viewWillAppear(_:))).map { _ in
   15|      0|            return
   16|      0|        }
   17|      0|    }
   18|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Utils/Validator/AnyValidator.swift:
    1|       |//
    2|       |//  AnyValidator.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct AnyValidator<Object, Error>: Validator {
   10|       |    private let _validate: (Object) -> Error?
   11|       |
   12|       |    // MARK: Initializer
   13|       |
   14|      2|    init<V: Validator>(base: V) where V.Object == Object, V.Error == Error {
   15|      2|        _validate = base.validate
   16|      2|    }
   17|       |
   18|       |    // MARK: Validator
   19|       |
   20|      6|    public func validate(object: Object) -> Error? {
   21|      6|        return _validate(object)
   22|      6|    }
   23|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Utils/Validator/Implementation/IntValueValidator.swift:
    1|       |//
    2|       |//  IntValidator.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct IntValueValidator {
   10|       |    private enum Constant {
   11|       |        static let messageKey = "error.int"
   12|       |    }
   13|       |}
   14|       |
   15|       |// MARK: Validator
   16|       |
   17|       |extension IntValueValidator: Validator {
   18|      3|    public func validate(object: String) -> DefaultAppError? {
   19|      3|        if object.count == 0 {
   20|      1|            return nil
   21|      2|        }
   22|      2|
   23|      2|        if nil != Int(object) {
   24|      1|            return nil
   25|      1|        }
   26|      1|
   27|      1|        return DefaultAppError(messageKey: Constant.messageKey)
   28|      2|    }
   29|       |}

/Users/sangbongmoon/Desktop/RxVipKit/RxVipKit/Foundation/Utils/Validator/Implementation/TextFiledValueValidator.swift:
    1|       |//
    2|       |//  TextFiledValueValidator.swift
    3|       |//  RxVipKit
    4|       |//
    5|       |//  Created by SANGBONG MOON on 27/01/2019.
    6|       |//  Copyright © 2019 Scott Moon. All rights reserved.
    7|       |//
    8|       |
    9|       |public struct TextFieldValueValidator {
   10|       |    private let minCharator: Int
   11|       |    private let maxCharator: Int
   12|       |
   13|       |    private enum Constant {
   14|       |        static let messageKey = "error.count_limit"
   15|       |    }
   16|       |
   17|       |    // MARK: Initializer
   18|      1|    init(minCharator: Int, maxCharator: Int) {
   19|      1|        self.minCharator = minCharator
   20|      1|        self.maxCharator = maxCharator
   21|      1|    }
   22|       |}
   23|       |
   24|       |extension TextFieldValueValidator: Validator {
   25|       |
   26|      3|    public func validate(object: String) -> DefaultAppError? {
   27|      3|        if object.count > minCharator && object.count < maxCharator {
   28|      1|            return nil
   29|      2|        }
   30|      2|
   31|      2|        return DefaultAppError(messageKey: Constant.messageKey)
   32|      3|    }
   33|       |}

